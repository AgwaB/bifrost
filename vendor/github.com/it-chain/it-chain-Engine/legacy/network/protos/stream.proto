syntax = "proto3";

package message;

import "common.proto";

service StreamService{
    rpc Stream (stream Envelope) returns (stream Envelope) {}
}

message Envelope {

    //marshalled Message
    bytes payload = 1;

    // signed Message
    bytes signature = 2;

    // sender's public key
    bytes pubkey = 3;
}

message StreamMessage{

    bytes channel = 1;

    oneof content{
        Block block = 2;
        Transaction transaction = 3;
        PeerTable peerTable = 4;
        ConsensusMessage consensusMessage = 5;
        Peer peer = 6;
        ConnectionEstablish connectionEstablish = 7;
        ElectionMessage electionMessage = 8;
    }
}

message Block{
    bytes data = 1;
}

message ConnectionEstablish {}

message PeerTable{
    string MyID = 1;
    map <string, Peer> PeerMap= 2;
}

message Peer {
    string ipAddress = 1;
    string port = 2;
    string peerID = 3;
    int32 heartBeat = 4;
    bytes pubKey = 5;
}

message ConsensusMessage {
    string ConsensusID = 1;
    View View = 2;
    int64 SequenceID = 3;
    Block Block = 4;
    string SenderID = 5;
    int32 MsgType = 6;
}

message View{
    string ViewID = 1;
    string LeaderID = 2;
    repeated string PeerID = 3;
}

message ElectionMessage{
    string LastBlockHash = 1;
    string SenderID = 2;
    int32 MsgType = 3;
    int64 Term = 4;
    repeated string PeerIDs = 5;
}




