// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Envelope struct {
	// marshalled Message
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// signed Message
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// sender's public key
	Pubkey []byte `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *Envelope) Reset()                    { *m = Envelope{} }
func (m *Envelope) String() string            { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()               {}
func (*Envelope) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Envelope) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type StreamMessage struct {
	Channel []byte `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*StreamMessage_Block
	//	*StreamMessage_Transaction
	//	*StreamMessage_PeerTable
	//	*StreamMessage_ConsensusMessage
	//	*StreamMessage_Peer
	//	*StreamMessage_ConnectionEstablish
	//	*StreamMessage_ElectionMessage
	Content isStreamMessage_Content `protobuf_oneof:"content"`
}

func (m *StreamMessage) Reset()                    { *m = StreamMessage{} }
func (m *StreamMessage) String() string            { return proto.CompactTextString(m) }
func (*StreamMessage) ProtoMessage()               {}
func (*StreamMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type isStreamMessage_Content interface {
	isStreamMessage_Content()
}

type StreamMessage_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,oneof"`
}
type StreamMessage_Transaction struct {
	Transaction *Transaction `protobuf:"bytes,3,opt,name=transaction,oneof"`
}
type StreamMessage_PeerTable struct {
	PeerTable *PeerTable `protobuf:"bytes,4,opt,name=peerTable,oneof"`
}
type StreamMessage_ConsensusMessage struct {
	ConsensusMessage *ConsensusMessage `protobuf:"bytes,5,opt,name=consensusMessage,oneof"`
}
type StreamMessage_Peer struct {
	Peer *Peer `protobuf:"bytes,6,opt,name=peer,oneof"`
}
type StreamMessage_ConnectionEstablish struct {
	ConnectionEstablish *ConnectionEstablish `protobuf:"bytes,7,opt,name=connectionEstablish,oneof"`
}
type StreamMessage_ElectionMessage struct {
	ElectionMessage *ElectionMessage `protobuf:"bytes,8,opt,name=electionMessage,oneof"`
}

func (*StreamMessage_Block) isStreamMessage_Content()               {}
func (*StreamMessage_Transaction) isStreamMessage_Content()         {}
func (*StreamMessage_PeerTable) isStreamMessage_Content()           {}
func (*StreamMessage_ConsensusMessage) isStreamMessage_Content()    {}
func (*StreamMessage_Peer) isStreamMessage_Content()                {}
func (*StreamMessage_ConnectionEstablish) isStreamMessage_Content() {}
func (*StreamMessage_ElectionMessage) isStreamMessage_Content()     {}

func (m *StreamMessage) GetContent() isStreamMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *StreamMessage) GetChannel() []byte {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *StreamMessage) GetBlock() *Block {
	if x, ok := m.GetContent().(*StreamMessage_Block); ok {
		return x.Block
	}
	return nil
}

func (m *StreamMessage) GetTransaction() *Transaction {
	if x, ok := m.GetContent().(*StreamMessage_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (m *StreamMessage) GetPeerTable() *PeerTable {
	if x, ok := m.GetContent().(*StreamMessage_PeerTable); ok {
		return x.PeerTable
	}
	return nil
}

func (m *StreamMessage) GetConsensusMessage() *ConsensusMessage {
	if x, ok := m.GetContent().(*StreamMessage_ConsensusMessage); ok {
		return x.ConsensusMessage
	}
	return nil
}

func (m *StreamMessage) GetPeer() *Peer {
	if x, ok := m.GetContent().(*StreamMessage_Peer); ok {
		return x.Peer
	}
	return nil
}

func (m *StreamMessage) GetConnectionEstablish() *ConnectionEstablish {
	if x, ok := m.GetContent().(*StreamMessage_ConnectionEstablish); ok {
		return x.ConnectionEstablish
	}
	return nil
}

func (m *StreamMessage) GetElectionMessage() *ElectionMessage {
	if x, ok := m.GetContent().(*StreamMessage_ElectionMessage); ok {
		return x.ElectionMessage
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamMessage_OneofMarshaler, _StreamMessage_OneofUnmarshaler, _StreamMessage_OneofSizer, []interface{}{
		(*StreamMessage_Block)(nil),
		(*StreamMessage_Transaction)(nil),
		(*StreamMessage_PeerTable)(nil),
		(*StreamMessage_ConsensusMessage)(nil),
		(*StreamMessage_Peer)(nil),
		(*StreamMessage_ConnectionEstablish)(nil),
		(*StreamMessage_ElectionMessage)(nil),
	}
}

func _StreamMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamMessage)
	// content
	switch x := m.Content.(type) {
	case *StreamMessage_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *StreamMessage_Transaction:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transaction); err != nil {
			return err
		}
	case *StreamMessage_PeerTable:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PeerTable); err != nil {
			return err
		}
	case *StreamMessage_ConsensusMessage:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConsensusMessage); err != nil {
			return err
		}
	case *StreamMessage_Peer:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Peer); err != nil {
			return err
		}
	case *StreamMessage_ConnectionEstablish:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConnectionEstablish); err != nil {
			return err
		}
	case *StreamMessage_ElectionMessage:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ElectionMessage); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamMessage.Content has unexpected type %T", x)
	}
	return nil
}

func _StreamMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamMessage)
	switch tag {
	case 2: // content.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMessage_Block{msg}
		return true, err
	case 3: // content.transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMessage_Transaction{msg}
		return true, err
	case 4: // content.peerTable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PeerTable)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMessage_PeerTable{msg}
		return true, err
	case 5: // content.consensusMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConsensusMessage)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMessage_ConsensusMessage{msg}
		return true, err
	case 6: // content.peer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Peer)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMessage_Peer{msg}
		return true, err
	case 7: // content.connectionEstablish
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ConnectionEstablish)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMessage_ConnectionEstablish{msg}
		return true, err
	case 8: // content.electionMessage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ElectionMessage)
		err := b.DecodeMessage(msg)
		m.Content = &StreamMessage_ElectionMessage{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamMessage)
	// content
	switch x := m.Content.(type) {
	case *StreamMessage_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_Transaction:
		s := proto.Size(x.Transaction)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_PeerTable:
		s := proto.Size(x.PeerTable)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_ConsensusMessage:
		s := proto.Size(x.ConsensusMessage)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_Peer:
		s := proto.Size(x.Peer)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_ConnectionEstablish:
		s := proto.Size(x.ConnectionEstablish)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_ElectionMessage:
		s := proto.Size(x.ElectionMessage)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Block struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Block) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ConnectionEstablish struct {
}

func (m *ConnectionEstablish) Reset()                    { *m = ConnectionEstablish{} }
func (m *ConnectionEstablish) String() string            { return proto.CompactTextString(m) }
func (*ConnectionEstablish) ProtoMessage()               {}
func (*ConnectionEstablish) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type PeerTable struct {
	MyID    string           `protobuf:"bytes,1,opt,name=MyID" json:"MyID,omitempty"`
	PeerMap map[string]*Peer `protobuf:"bytes,2,rep,name=PeerMap" json:"PeerMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PeerTable) Reset()                    { *m = PeerTable{} }
func (m *PeerTable) String() string            { return proto.CompactTextString(m) }
func (*PeerTable) ProtoMessage()               {}
func (*PeerTable) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *PeerTable) GetMyID() string {
	if m != nil {
		return m.MyID
	}
	return ""
}

func (m *PeerTable) GetPeerMap() map[string]*Peer {
	if m != nil {
		return m.PeerMap
	}
	return nil
}

type Peer struct {
	IpAddress string `protobuf:"bytes,1,opt,name=ipAddress" json:"ipAddress,omitempty"`
	Port      string `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	PeerID    string `protobuf:"bytes,3,opt,name=peerID" json:"peerID,omitempty"`
	HeartBeat int32  `protobuf:"varint,4,opt,name=heartBeat" json:"heartBeat,omitempty"`
	PubKey    []byte `protobuf:"bytes,5,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *Peer) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *Peer) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *Peer) GetPeerID() string {
	if m != nil {
		return m.PeerID
	}
	return ""
}

func (m *Peer) GetHeartBeat() int32 {
	if m != nil {
		return m.HeartBeat
	}
	return 0
}

func (m *Peer) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type ConsensusMessage struct {
	ConsensusID string `protobuf:"bytes,1,opt,name=ConsensusID" json:"ConsensusID,omitempty"`
	View        *View  `protobuf:"bytes,2,opt,name=View" json:"View,omitempty"`
	SequenceID  int64  `protobuf:"varint,3,opt,name=SequenceID" json:"SequenceID,omitempty"`
	Block       *Block `protobuf:"bytes,4,opt,name=Block" json:"Block,omitempty"`
	SenderID    string `protobuf:"bytes,5,opt,name=SenderID" json:"SenderID,omitempty"`
	MsgType     int32  `protobuf:"varint,6,opt,name=MsgType" json:"MsgType,omitempty"`
}

func (m *ConsensusMessage) Reset()                    { *m = ConsensusMessage{} }
func (m *ConsensusMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusMessage) ProtoMessage()               {}
func (*ConsensusMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *ConsensusMessage) GetConsensusID() string {
	if m != nil {
		return m.ConsensusID
	}
	return ""
}

func (m *ConsensusMessage) GetView() *View {
	if m != nil {
		return m.View
	}
	return nil
}

func (m *ConsensusMessage) GetSequenceID() int64 {
	if m != nil {
		return m.SequenceID
	}
	return 0
}

func (m *ConsensusMessage) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *ConsensusMessage) GetSenderID() string {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *ConsensusMessage) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

type View struct {
	ViewID   string   `protobuf:"bytes,1,opt,name=ViewID" json:"ViewID,omitempty"`
	LeaderID string   `protobuf:"bytes,2,opt,name=LeaderID" json:"LeaderID,omitempty"`
	PeerID   []string `protobuf:"bytes,3,rep,name=PeerID" json:"PeerID,omitempty"`
}

func (m *View) Reset()                    { *m = View{} }
func (m *View) String() string            { return proto.CompactTextString(m) }
func (*View) ProtoMessage()               {}
func (*View) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *View) GetViewID() string {
	if m != nil {
		return m.ViewID
	}
	return ""
}

func (m *View) GetLeaderID() string {
	if m != nil {
		return m.LeaderID
	}
	return ""
}

func (m *View) GetPeerID() []string {
	if m != nil {
		return m.PeerID
	}
	return nil
}

type ElectionMessage struct {
	LastBlockHash string   `protobuf:"bytes,1,opt,name=LastBlockHash" json:"LastBlockHash,omitempty"`
	SenderID      string   `protobuf:"bytes,2,opt,name=SenderID" json:"SenderID,omitempty"`
	MsgType       int32    `protobuf:"varint,3,opt,name=MsgType" json:"MsgType,omitempty"`
	Term          int64    `protobuf:"varint,4,opt,name=Term" json:"Term,omitempty"`
	PeerIDs       []string `protobuf:"bytes,5,rep,name=PeerIDs" json:"PeerIDs,omitempty"`
}

func (m *ElectionMessage) Reset()                    { *m = ElectionMessage{} }
func (m *ElectionMessage) String() string            { return proto.CompactTextString(m) }
func (*ElectionMessage) ProtoMessage()               {}
func (*ElectionMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *ElectionMessage) GetLastBlockHash() string {
	if m != nil {
		return m.LastBlockHash
	}
	return ""
}

func (m *ElectionMessage) GetSenderID() string {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *ElectionMessage) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *ElectionMessage) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *ElectionMessage) GetPeerIDs() []string {
	if m != nil {
		return m.PeerIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*Envelope)(nil), "message.Envelope")
	proto.RegisterType((*StreamMessage)(nil), "message.StreamMessage")
	proto.RegisterType((*Block)(nil), "message.Block")
	proto.RegisterType((*ConnectionEstablish)(nil), "message.ConnectionEstablish")
	proto.RegisterType((*PeerTable)(nil), "message.PeerTable")
	proto.RegisterType((*Peer)(nil), "message.Peer")
	proto.RegisterType((*ConsensusMessage)(nil), "message.ConsensusMessage")
	proto.RegisterType((*View)(nil), "message.View")
	proto.RegisterType((*ElectionMessage)(nil), "message.ElectionMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamService service

type StreamServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (StreamService_StreamClient, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (StreamService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[0], c.cc, "/message.StreamService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceStreamClient{stream}
	return x, nil
}

type StreamService_StreamClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type streamServiceStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceStreamClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceStreamClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamService service

type StreamServiceServer interface {
	Stream(StreamService_StreamServer) error
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).Stream(&streamServiceStreamServer{stream})
}

type StreamService_StreamServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type streamServiceStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceStreamServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceStreamServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "message.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _StreamService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 685 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xb6, 0xe3, 0x38, 0x69, 0x26, 0x29, 0x2d, 0x5b, 0x40, 0x26, 0x54, 0x50, 0xdc, 0x0a, 0xf5,
	0x14, 0xa1, 0xc0, 0xa1, 0x70, 0xa3, 0x34, 0x22, 0x55, 0x1b, 0xa9, 0xda, 0x44, 0x1c, 0xb8, 0x6d,
	0x9c, 0x51, 0x13, 0xd5, 0x59, 0x1b, 0xaf, 0x53, 0xe4, 0x17, 0xe0, 0x25, 0x38, 0xf3, 0x3e, 0x48,
	0xbc, 0x10, 0xda, 0xf1, 0xda, 0xf9, 0x2b, 0x27, 0xef, 0x7c, 0x33, 0xdf, 0xfc, 0x8f, 0xa1, 0xa5,
	0xd2, 0x04, 0xc5, 0xbc, 0x13, 0x27, 0x51, 0x1a, 0xb1, 0xfa, 0x1c, 0x95, 0x12, 0xb7, 0xd8, 0x6e,
	0x05, 0xd1, 0x7c, 0x1e, 0xc9, 0x1c, 0xf6, 0xbf, 0xc1, 0x4e, 0x4f, 0xde, 0x63, 0x18, 0xc5, 0xc8,
	0x3c, 0xa8, 0xc7, 0x22, 0x0b, 0x23, 0x31, 0xf1, 0xec, 0x23, 0xfb, 0xb4, 0xc5, 0x0b, 0x91, 0x1d,
	0x42, 0x43, 0xcd, 0x6e, 0xa5, 0x48, 0x17, 0x09, 0x7a, 0x15, 0xd2, 0x2d, 0x01, 0xf6, 0x0c, 0x6a,
	0xf1, 0x62, 0x7c, 0x87, 0x99, 0xe7, 0x90, 0xca, 0x48, 0xfe, 0x1f, 0x07, 0x76, 0x87, 0x94, 0xc3,
	0x20, 0x8f, 0xad, 0x23, 0x04, 0x53, 0x21, 0x25, 0x86, 0x45, 0x04, 0x23, 0xb2, 0x37, 0xe0, 0x8e,
	0xc3, 0x28, 0xb8, 0x23, 0xef, 0xcd, 0xee, 0xa3, 0x8e, 0x49, 0xb7, 0x73, 0xae, 0xd1, 0xbe, 0xc5,
	0x73, 0x35, 0x3b, 0x83, 0x66, 0x9a, 0x08, 0xa9, 0x44, 0x90, 0xce, 0x22, 0x49, 0x01, 0x9b, 0xdd,
	0x27, 0xa5, 0xf5, 0x68, 0xa9, 0xeb, 0x5b, 0x7c, 0xd5, 0x94, 0x75, 0xa1, 0x11, 0x23, 0x26, 0x23,
	0x31, 0x0e, 0xd1, 0xab, 0x12, 0x8f, 0x95, 0xbc, 0x9b, 0x42, 0xd3, 0xb7, 0xf8, 0xd2, 0x8c, 0x7d,
	0x81, 0xfd, 0x20, 0x92, 0x0a, 0xa5, 0x5a, 0x28, 0x53, 0x83, 0xe7, 0x12, 0xf5, 0x79, 0x49, 0xfd,
	0xbc, 0x61, 0xd0, 0xb7, 0xf8, 0x16, 0x89, 0x1d, 0x43, 0x55, 0x7b, 0xf5, 0x6a, 0x44, 0xde, 0x5d,
	0x8b, 0xdb, 0xb7, 0x38, 0x29, 0xd9, 0x0d, 0x1c, 0x04, 0x91, 0x94, 0x48, 0xf9, 0xf6, 0x54, 0x2a,
	0xc6, 0xe1, 0x4c, 0x4d, 0xbd, 0x3a, 0x71, 0x0e, 0x57, 0x03, 0x6e, 0xda, 0xf4, 0x2d, 0xfe, 0x10,
	0x95, 0x5d, 0xc0, 0x1e, 0x86, 0x39, 0x58, 0xa4, 0xbf, 0x43, 0xde, 0xbc, 0xd2, 0x5b, 0x6f, 0x5d,
	0xdf, 0xb7, 0xf8, 0x26, 0xe5, 0xbc, 0x01, 0xf5, 0x20, 0x92, 0x29, 0xca, 0xd4, 0x7f, 0x01, 0x2e,
	0x0d, 0x84, 0x31, 0xa8, 0x4e, 0x44, 0x2a, 0xcc, 0x18, 0xe9, 0xed, 0x3f, 0x85, 0x83, 0x07, 0x72,
	0xf3, 0x7f, 0xdb, 0xd0, 0x28, 0xfb, 0xab, 0x89, 0x83, 0xec, 0xf2, 0x82, 0x88, 0x0d, 0x4e, 0x6f,
	0xf6, 0x01, 0xea, 0xda, 0x60, 0x20, 0x62, 0xaf, 0x72, 0xe4, 0x9c, 0x36, 0xbb, 0xaf, 0xb6, 0x07,
	0xd3, 0x31, 0x16, 0x3d, 0x99, 0x26, 0x19, 0x2f, 0xec, 0xdb, 0x97, 0xd0, 0x5a, 0x55, 0xb0, 0x7d,
	0x70, 0xf4, 0x22, 0xe6, 0xde, 0xf5, 0x93, 0x1d, 0x83, 0x7b, 0x2f, 0xc2, 0x05, 0x9a, 0xcd, 0x5a,
	0xef, 0x3d, 0xcf, 0x75, 0x1f, 0x2b, 0x67, 0xb6, 0xff, 0xd3, 0x86, 0xaa, 0xc6, 0xf4, 0xb6, 0xcf,
	0xe2, 0x4f, 0x93, 0x49, 0x82, 0x4a, 0x19, 0x4f, 0x4b, 0x40, 0x17, 0x10, 0x47, 0x49, 0x4a, 0xee,
	0x1a, 0x9c, 0xde, 0x74, 0x01, 0x88, 0xc9, 0xe5, 0x05, 0x2d, 0x64, 0x83, 0x1b, 0x49, 0x7b, 0x9a,
	0xa2, 0x48, 0xd2, 0x73, 0x14, 0x29, 0xed, 0x9c, 0xcb, 0x97, 0x80, 0xb9, 0x9b, 0x2b, 0xcc, 0x68,
	0xa7, 0xf2, 0xbb, 0xb9, 0xc2, 0xcc, 0xff, 0x6b, 0xc3, 0xfe, 0xe6, 0x56, 0xb1, 0x23, 0x68, 0x96,
	0x58, 0xd9, 0xbe, 0x55, 0x88, 0xbd, 0x86, 0xea, 0xd7, 0x19, 0xfe, 0xd8, 0xaa, 0x53, 0x83, 0x9c,
	0x54, 0xec, 0x25, 0xc0, 0x10, 0xbf, 0x2f, 0x50, 0x06, 0x68, 0x72, 0x75, 0xf8, 0x0a, 0xc2, 0x4e,
	0xcc, 0x78, 0xcd, 0x7d, 0x6c, 0x5c, 0x21, 0x37, 0xb3, 0x6f, 0xc3, 0xce, 0x10, 0xe5, 0x84, 0xea,
	0x75, 0x29, 0x8f, 0x52, 0xd6, 0x17, 0x3e, 0x50, 0xb7, 0xa3, 0x2c, 0x46, 0xda, 0x75, 0x97, 0x17,
	0xa2, 0xcf, 0xf3, 0xf4, 0x74, 0xd5, 0xfa, 0x5b, 0xd6, 0x60, 0x24, 0xed, 0xf5, 0x1a, 0x45, 0xee,
	0x35, 0xef, 0x6d, 0x29, 0x6b, 0xce, 0x4d, 0xd1, 0x5f, 0x47, 0x73, 0x72, 0xc9, 0xff, 0x65, 0xc3,
	0xde, 0xc6, 0x02, 0xb3, 0x13, 0xd8, 0xbd, 0x16, 0x2a, 0xcd, 0xff, 0x1b, 0x42, 0x4d, 0x4d, 0x98,
	0x75, 0x70, 0xad, 0x86, 0xca, 0xff, 0x6b, 0x70, 0xd6, 0x6a, 0xd0, 0xb3, 0x1f, 0x61, 0x32, 0xa7,
	0xf6, 0x38, 0x9c, 0xde, 0xda, 0x3a, 0xcf, 0x46, 0x79, 0x2e, 0x25, 0x57, 0x88, 0xdd, 0x5e, 0xf1,
	0xfb, 0x1b, 0x62, 0x72, 0x3f, 0x0b, 0x90, 0xbd, 0x87, 0x5a, 0x0e, 0xb0, 0xc7, 0xcb, 0xfb, 0x33,
	0x7f, 0xdf, 0xf6, 0x36, 0xe4, 0x5b, 0xa7, 0xf6, 0x5b, 0x7b, 0x5c, 0xa3, 0x3f, 0xf5, 0xbb, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x12, 0xf1, 0x91, 0xd0, 0x05, 0x00, 0x00,
}
