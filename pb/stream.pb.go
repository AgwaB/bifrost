// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Envelope_Type int32

const (
	Envelope_REQUEST_PEERINFO  Envelope_Type = 0
	Envelope_RESPONSE_PEERINFO Envelope_Type = 2
	Envelope_NORMAL            Envelope_Type = 3
)

var Envelope_Type_name = map[int32]string{
	0: "REQUEST_PEERINFO",
	2: "RESPONSE_PEERINFO",
	3: "NORMAL",
}
var Envelope_Type_value = map[string]int32{
	"REQUEST_PEERINFO":  0,
	"RESPONSE_PEERINFO": 2,
	"NORMAL":            3,
}

func (x Envelope_Type) String() string {
	return proto.EnumName(Envelope_Type_name, int32(x))
}
func (Envelope_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stream_2e627906fcd402b5, []int{0, 0}
}

type Envelope struct {
	// marshalled Message
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// signed Message
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// sender's public key
	Pubkey []byte `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// message protocol
	Protocol             string        `protobuf:"bytes,4,opt,name=protocol" json:"protocol,omitempty"`
	Type                 Envelope_Type `protobuf:"varint,5,opt,name=type,enum=pb.Envelope_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_2e627906fcd402b5, []int{0}
}
func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Envelope.Unmarshal(m, b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
}
func (dst *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(dst, src)
}
func (m *Envelope) XXX_Size() int {
	return xxx_messageInfo_Envelope.Size(m)
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Envelope) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Envelope) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Envelope) GetType() Envelope_Type {
	if m != nil {
		return m.Type
	}
	return Envelope_REQUEST_PEERINFO
}

func init() {
	proto.RegisterType((*Envelope)(nil), "pb.Envelope")
	proto.RegisterEnum("pb.Envelope_Type", Envelope_Type_name, Envelope_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamService service

type StreamServiceClient interface {
	BifrostStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_BifrostStreamClient, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) BifrostStream(ctx context.Context, opts ...grpc.CallOption) (StreamService_BifrostStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[0], c.cc, "/pb.StreamService/BifrostStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceBifrostStreamClient{stream}
	return x, nil
}

type StreamService_BifrostStreamClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type streamServiceBifrostStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceBifrostStreamClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceBifrostStreamClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamService service

type StreamServiceServer interface {
	BifrostStream(StreamService_BifrostStreamServer) error
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_BifrostStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).BifrostStream(&streamServiceBifrostStreamServer{stream})
}

type StreamService_BifrostStreamServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type streamServiceBifrostStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceBifrostStreamServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceBifrostStreamServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BifrostStream",
			Handler:       _StreamService_BifrostStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_stream_2e627906fcd402b5) }

var fileDescriptor_stream_2e627906fcd402b5 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x97, 0xae, 0xd6, 0xed, 0xd0, 0x49, 0x77, 0x50, 0x09, 0xc3, 0x8b, 0x52, 0x10, 0x7a,
	0x55, 0x74, 0x3e, 0x80, 0x38, 0x88, 0x20, 0x68, 0x3b, 0x93, 0x79, 0x2d, 0xed, 0x8c, 0x52, 0xac,
	0x4b, 0x48, 0xb3, 0x41, 0x5f, 0xd6, 0x67, 0x11, 0xa3, 0x73, 0xee, 0xf2, 0xfb, 0xbe, 0x8b, 0xf3,
	0x1f, 0x08, 0x5b, 0x6b, 0x64, 0xf9, 0x91, 0x69, 0xa3, 0xac, 0x42, 0x4f, 0x57, 0xc9, 0x27, 0x81,
	0x01, 0x5b, 0x6d, 0x64, 0xa3, 0xb4, 0x44, 0x0a, 0x87, 0xba, 0xec, 0x1a, 0x55, 0xbe, 0x50, 0x12,
	0x93, 0x34, 0xe4, 0x5b, 0xc4, 0x33, 0x18, 0xb6, 0xf5, 0xdb, 0xaa, 0xb4, 0x6b, 0x23, 0xa9, 0xe7,
	0xda, 0x4e, 0xe0, 0x29, 0x04, 0x7a, 0x5d, 0xbd, 0xcb, 0x8e, 0xf6, 0x5d, 0xfa, 0x25, 0x9c, 0xc0,
	0xc0, 0x5d, 0x5a, 0xaa, 0x86, 0xfa, 0x31, 0x49, 0x87, 0xfc, 0x8f, 0xf1, 0x1c, 0x7c, 0xdb, 0x69,
	0x49, 0x0f, 0x62, 0x92, 0x1e, 0x4d, 0xc7, 0x99, 0xae, 0xb2, 0xed, 0x8e, 0x6c, 0xd1, 0x69, 0xc9,
	0x5d, 0x4e, 0xae, 0xc1, 0xff, 0x26, 0x3c, 0x86, 0x88, 0xb3, 0xc7, 0x27, 0x26, 0x16, 0xcf, 0x73,
	0xc6, 0xf8, 0x5d, 0x7e, 0x5b, 0x44, 0x3d, 0x3c, 0x81, 0x31, 0x67, 0x62, 0x5e, 0xe4, 0x82, 0xed,
	0xb4, 0x87, 0x00, 0x41, 0x5e, 0xf0, 0x87, 0x9b, 0xfb, 0xa8, 0x3f, 0x9d, 0xc1, 0x48, 0xb8, 0xa7,
	0x85, 0x34, 0x9b, 0x7a, 0x29, 0xf1, 0x12, 0x46, 0xb3, 0xfa, 0xd5, 0xa8, 0xd6, 0xfe, 0x78, 0x0c,
	0xff, 0xdf, 0x9e, 0xec, 0x51, 0xd2, 0x4b, 0xc9, 0x05, 0xa9, 0x02, 0xb7, 0xfa, 0xea, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0x98, 0x68, 0x10, 0xdc, 0x3f, 0x01, 0x00, 0x00,
}
