// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	stream.proto

It has these top-level messages:
	Envelope
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Envelope_Type int32

const (
	Envelope_Connection    Envelope_Type = 0
	Envelope_DisConnection Envelope_Type = 1
	Envelope_DataTransfer  Envelope_Type = 2
)

var Envelope_Type_name = map[int32]string{
	0: "Connection",
	1: "DisConnection",
	2: "DataTransfer",
}
var Envelope_Type_value = map[string]int32{
	"Connection":    0,
	"DisConnection": 1,
	"DataTransfer":  2,
}

func (x Envelope_Type) String() string {
	return proto.EnumName(Envelope_Type_name, int32(x))
}
func (Envelope_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Envelope struct {
	// marshalled Message
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// signed Message
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// sender's public key
	Pubkey []byte        `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Type   Envelope_Type `protobuf:"varint,4,opt,name=type,enum=pb.Envelope_Type" json:"type,omitempty"`
}

func (m *Envelope) Reset()                    { *m = Envelope{} }
func (m *Envelope) String() string            { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()               {}
func (*Envelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Envelope) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Envelope) GetType() Envelope_Type {
	if m != nil {
		return m.Type
	}
	return Envelope_Connection
}

func init() {
	proto.RegisterType((*Envelope)(nil), "pb.Envelope")
	proto.RegisterEnum("pb.Envelope_Type", Envelope_Type_name, Envelope_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StreamService service

type StreamServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (StreamService_StreamClient, error)
}

type streamServiceClient struct {
	cc *grpc.ClientConn
}

func NewStreamServiceClient(cc *grpc.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (StreamService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[0], c.cc, "/pb.StreamService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceStreamClient{stream}
	return x, nil
}

type StreamService_StreamClient interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type streamServiceStreamClient struct {
	grpc.ClientStream
}

func (x *streamServiceStreamClient) Send(m *Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceStreamClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamService service

type StreamServiceServer interface {
	Stream(StreamService_StreamServer) error
}

func RegisterStreamServiceServer(s *grpc.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServiceServer).Stream(&streamServiceStreamServer{stream})
}

type StreamService_StreamServer interface {
	Send(*Envelope) error
	Recv() (*Envelope, error)
	grpc.ServerStream
}

type streamServiceStreamServer struct {
	grpc.ServerStream
}

func (x *streamServiceStreamServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceStreamServer) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _StreamService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x9b, 0x75, 0x59, 0x75, 0xd8, 0x96, 0xed, 0x1c, 0x24, 0x88, 0x87, 0xb2, 0x20, 0x2c,
	0x1e, 0x82, 0xd4, 0x63, 0x8f, 0xd6, 0x17, 0x68, 0xfb, 0x02, 0x49, 0x1d, 0x25, 0x58, 0x93, 0x21,
	0x49, 0x0b, 0x79, 0x39, 0x9f, 0x4d, 0x8c, 0x16, 0xdb, 0xe3, 0xf7, 0x7d, 0x87, 0x9f, 0x19, 0x68,
	0x63, 0x0a, 0xa4, 0x3f, 0x15, 0x07, 0x9f, 0x3c, 0x56, 0x6c, 0xfa, 0x2f, 0x01, 0x57, 0x2f, 0xee,
	0x40, 0x3b, 0xcf, 0x84, 0x12, 0x2e, 0x59, 0xe7, 0x9d, 0xd7, 0xaf, 0x52, 0xcc, 0xc4, 0xd0, 0xae,
	0x8e, 0x88, 0x77, 0x70, 0x1d, 0xed, 0xbb, 0xd3, 0x69, 0x1f, 0x48, 0x56, 0xa5, 0xfd, 0x0b, 0xbc,
	0x81, 0x86, 0xf7, 0xe6, 0x83, 0xb2, 0xbc, 0x28, 0xe9, 0x8f, 0xf0, 0x1e, 0xea, 0x94, 0x99, 0x64,
	0x3d, 0x13, 0xc3, 0x64, 0x3e, 0x55, 0x6c, 0xd4, 0x71, 0x4b, 0x6d, 0x32, 0xd3, 0xaa, 0xe4, 0x7e,
	0x01, 0xf5, 0x0f, 0xe1, 0x04, 0xe0, 0xd9, 0x3b, 0x47, 0xdb, 0x64, 0xbd, 0xeb, 0x46, 0x38, 0x85,
	0xf1, 0xd2, 0xc6, 0x13, 0x25, 0xb0, 0x83, 0x76, 0xa9, 0x93, 0xde, 0x04, 0xed, 0xe2, 0x1b, 0x85,
	0xae, 0x9a, 0x2f, 0x60, 0xbc, 0x2e, 0x47, 0xad, 0x29, 0x1c, 0xec, 0x96, 0xf0, 0x01, 0x9a, 0x5f,
	0x81, 0xed, 0xe9, 0xe0, 0xed, 0x19, 0xf5, 0xa3, 0x41, 0x3c, 0x0a, 0xd3, 0x94, 0x47, 0x3c, 0x7d,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x27, 0xec, 0x9f, 0x05, 0x18, 0x01, 0x00, 0x00,
}
